
import http from 'http';

type Item = { id: number; name: string };
let items: Item[] = [];
let nextId = 1;

const server = http.createServer((req, res) => {
  res.setHeader('Content-Type', 'application/json');
  const url = req.url || '';
  const method = req.method || '';

  if (url === '/items' && method === 'GET') {
    res.writeHead(200);
    res.end(JSON.stringify(items));
  } else if (url === '/items' && method === 'POST') {
    let body = '';
    req.on('data', chunk => (body += chunk));
    req.on('end', () => {
      const { name } = JSON.parse(body);
      const newItem = { id: nextId++, name };
      items.push(newItem);
      res.writeHead(201);
      res.end(JSON.stringify(newItem));
    });
  } else if (url.startsWith('/items/') && method === 'PUT') {
    const id = Number(url.split('/')[2]);
    let body = '';
    req.on('data', chunk => (body += chunk));
    req.on('end', () => {
      const { name } = JSON.parse(body);
      const item = items.find(i => i.id === id);
      if (item) {
        item.name = name;
        res.writeHead(200);
        res.end(JSON.stringify(item));
      } else {
        res.writeHead(404);
        res.end(JSON.stringify({ error: 'Item não encontrado' }));
      }
    });
  } else if (url.startsWith('/items/') && method === 'DELETE') {
    const id = Number(url.split('/')[2]);
    const index = items.findIndex(i => i.id === id);
    if (index !== -1) {
      items.splice(index, 1);
      res.writeHead(204);
      res.end();
    } else {
      res.writeHead(404);
      res.end(JSON.stringify({ error: 'Item não encontrado' }));
    }
  } else {
    res.writeHead(404);
    res.end(JSON.stringify({ error: 'Rota não encontrada' }));
  }
});

server.listen(3000, () => {
  console.log('Servidor rodando na porta 3000');
});
